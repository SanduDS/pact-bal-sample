/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ballerina.pact.wrapper;

import static org.junit.Assert.assertEquals;

import org.jetbrains.annotations.NotNull;
import org.junit.Test;

import au.com.dius.pact.consumer.ConsumerPactBuilder;
import au.com.dius.pact.consumer.MockServer;
import org.apache.hc.core5.http.ContentType;
import au.com.dius.pact.consumer.PactTestExecutionContext;
import au.com.dius.pact.consumer.PactTestRun;
import au.com.dius.pact.consumer.PactVerificationResult;
import au.com.dius.pact.consumer.PactVerificationResult.Ok;
import au.com.dius.pact.consumer.model.MockProviderConfig;
import au.com.dius.pact.core.model.PactSpecVersion;
import au.com.dius.pact.core.model.RequestResponsePact;

import static au.com.dius.pact.consumer.ConsumerPactRunnerKt.runConsumerTest;

import java.util.*;
import java.io.IOException;

import static org.junit.Assert.*;

// public class LibraryTest {
//     @Test
//     public void testConsumerRequest() {
//         RequestResponsePact pact = ConsumerPactBuilder
//                 .consumer("Test Consumer")
//                 .hasPactWith("Greeting Provider")
//                 .uponReceiving(" 02 a request to say Hello with receiver's name")
//                 .path("/hello")
//                 .method("POST")
//                 .body("{\"name\": \"harry\"}", ContentType.APPLICATION_JSON)
//                 .willRespondWith()
//                 .status(200)
//                 .body("{\"hello\": \"harry\"}", ContentType.APPLICATION_JSON)
//                 .toPact();
//         MockProviderConfig config = MockProviderConfig.createDefault(PactSpecVersion.V4);
//         System.out.println("LibraryTest.testSomeLibraryMethod() mockConfig" + config.getHostname());

//         PactTestRun pactTestRun = new PactTestRun() {
//             @Override
//             public Object run(@NotNull MockServer mockServer, PactTestExecutionContext arg1) throws Throwable {
//                 Map expectedResponse = new HashMap();
//                 expectedResponse.put("hello", "harry");
//                 Map realResponse = new HashMap();
//                 if (mockServer instanceof MockServer) {
//                     System.out.println("LibraryTest.testSomeLibraryMethod().new PactTestRun() {...}.run()--->YES");
//                 }
//                 realResponse = new ConsumerClient(mockServer.getUrl()).post("/hello",
//                         "{\"name\": \"harry\"}", ContentType.APPLICATION_JSON);
//                 assertEquals(expectedResponse, realResponse);
//                 return "";
//             }

//         };

//         PactVerificationResult result = runConsumerTest(pact, config, pactTestRun);

//         if (result instanceof PactVerificationResult.Error) {
//             System.out.println("LibraryTest.testSomeLibraryMethod()" + result.getDescription());
//             throw new RuntimeException(((PactVerificationResult.Error) result).getError());
//         }

//         assertEquals(PactVerificationResult.Ok.class.getTypeName(), result.getClass().getName());
//     }
// }


public class LibraryTest {
    @Test
    public void testConsumerRequest() {
        RequestResponsePact pact = ConsumerPactBuilder
                .consumer("Test Consumer")
                .hasPactWith("Greeting Provider")
                .uponReceiving(" 02 a request to say Hello with receiver's name")
                .path("/hello")
                .method("POST")
                .body("{\"name\": \"harry\"}", ContentType.APPLICATION_JSON)
                .willRespondWith()
                .status(200)
                .body("{\"hello\": \"harry\"}", ContentType.APPLICATION_JSON)
                .toPact();
        MockProviderConfig config = MockProviderConfig.createDefault(PactSpecVersion.V4);
        System.out.println("LibraryTest.testSomeLibraryMethod() mockConfig" + config.getHostname());

        PactTestRun pactTestRun = new PactTestRun() {
            @Override
            public Object run(@NotNull MockServer mockServer, PactTestExecutionContext arg1) throws Throwable {
                Map expectedResponse = new HashMap();
                expectedResponse.put("hello", "harry");
                Map realResponse = new HashMap();
                if (mockServer instanceof MockServer) {
                    System.out.println("LibraryTest.testSomeLibraryMethod().new PactTestRun() {...}.run()--->YES");
                }
                realResponse = new ConsumerClient(mockServer.getUrl()).post("/hello",
                        "{\"name\": \"harry\"}", ContentType.APPLICATION_JSON);
                assertEquals(expectedResponse, realResponse);
                return "";
            }

        };

        PactVerificationResult result = runConsumerTest(pact, config, pactTestRun);

        if (result instanceof PactVerificationResult.Error) {
            System.out.println("LibraryTest.testSomeLibraryMethod()" + result.getDescription());
            throw new RuntimeException(((PactVerificationResult.Error) result).getError());
        }

        assertEquals(PactVerificationResult.Ok.class.getTypeName(), result.getClass().getName());
    }
}